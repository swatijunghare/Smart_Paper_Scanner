{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./image-scanner-api.service\";\nexport class AppComponent {\n  constructor(imgScannerApi) {\n    this.imgScannerApi = imgScannerApi;\n    this.title = 'app';\n    this.selectedImage = null;\n  }\n  onFileSelected(event) {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n    if (this.selectedImage) {\n      // Log the original size of the image in KB\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n      // Call the function to compress and upload the image\n      this.compressAndUpload();\n    }\n  }\n  compressAndUpload() {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const imageData = reader.result;\n        const byteCharacters = atob(imageData.split(',')[1]);\n        const byteNumbers = new Array(byteCharacters.length);\n        for (let i = 0; i < byteCharacters.length; i++) {\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\n        }\n        const byteArray = new Uint8Array(byteNumbers);\n        const blob = new Blob([byteArray], {\n          type: undefined\n        });\n        // Call your API service here to send the compressed image\n        this.imgScannerApi.sendData(blob).subscribe({\n          next: response => {\n            console.log('API Response:', response);\n          },\n          error: error => {\n            console.error('API Error:', error);\n          }\n        });\n      };\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ImageScannerApiService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 9,\n  vars: 0,\n  consts: [[\"type\", \"file\", 3, \"change\"], [3, \"click\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"body\");\n      i0.ɵɵelementStart(1, \"h2\");\n      i0.ɵɵtext(2, \"Smart Paper Scanner\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\")(4, \"input\", 0);\n      i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_4_listener($event) {\n        return ctx.onFileSelected($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(5, \"br\")(6, \"hr\");\n      i0.ɵɵelementStart(7, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_7_listener() {\n        return ctx.compressAndUpload();\n      });\n      i0.ɵɵtext(8, \"Compress and Upload\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;AAmFA,OAAM,MAAOA,YAAY;EAIvBC,YAAoBC,aAAqC;IAArC,kBAAa,GAAbA,aAAa;IAHjC,UAAK,GAAG,KAAK;IACb,kBAAa,GAAgB,IAAI;EAE2B;EAE5DC,cAAc,CAACC,KAAU;IACvB,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;IAChC,IAAI,CAACE,aAAa,GAAGF,KAAK,IAAIA,KAAK,CAACG,MAAM,GAAG,CAAC,GAAGH,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;IAEhE,IAAI,IAAI,CAACE,aAAa,EAAE;MACtB;MACA,MAAME,mBAAmB,GAAG,IAAI,CAACF,aAAa,CAACG,IAAI;MACnD,MAAMC,gBAAgB,GAAGF,mBAAmB,GAAG,IAAI;MACnDG,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,gBAAgB,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;MAEtE;MACA,IAAI,CAACC,iBAAiB,EAAE;;EAE5B;EAEAA,iBAAiB;IACf,IAAI,IAAI,CAACR,aAAa,EAAE;MACtB,MAAMS,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAK;QACnB,MAAMC,SAAS,GAAGH,MAAM,CAACI,MAAgB;QACzC,MAAMC,cAAc,GAAGC,IAAI,CAACH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpD,MAAMC,WAAW,GAAG,IAAIC,KAAK,CAACJ,cAAc,CAACb,MAAM,CAAC;QAEpD,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,CAACb,MAAM,EAAEkB,CAAC,EAAE,EAAE;UAC9CF,WAAW,CAACE,CAAC,CAAC,GAAGL,cAAc,CAACM,UAAU,CAACD,CAAC,CAAC;;QAG/C,MAAME,SAAS,GAAG,IAAIC,UAAU,CAACL,WAAW,CAAC;QAC7C,MAAMM,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,SAAS,CAAC,EAAE;UAAEI,IAAI,EAAEC;QAAS,CAAE,CAAC;QAEvD;QACA,IAAI,CAAC/B,aAAa,CAACgC,QAAQ,CAACJ,IAAI,CAAC,CAACK,SAAS,CAAC;UAC1CC,IAAI,EAAGC,QAAQ,IAAI;YACjBzB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEwB,QAAQ,CAAC;UACxC,CAAC;UACDC,KAAK,EAAGA,KAAK,IAAI;YACf1B,OAAO,CAAC0B,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;UACpC;SACD,CAAC;MACJ,CAAC;MACDtB,MAAM,CAACuB,aAAa,CAAC,IAAI,CAAChC,aAAa,CAAC;;EAE5C;;AAhDWP,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAwC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCnFzBC,uBAKO;MACPA,0BAAI;MAAAA,mCAAmB;MAAAA,iBAAK;MAC5BA,2BAAK;MACgBA;QAAA,OAAUC,0BAAsB;MAAA,EAAC;MAApDD,iBAAuD;MAEzDA,qBAAI;MAEJA,iCAAsC;MAA9BA;QAAA,OAASC,uBAAmB;MAAA,EAAC;MAACD,mCAAmB;MAAAA,iBAAS","names":["AppComponent","constructor","imgScannerApi","onFileSelected","event","files","target","selectedImage","length","originalSizeInBytes","size","originalSizeInKB","console","log","toFixed","compressAndUpload","reader","FileReader","onload","imageData","result","byteCharacters","atob","split","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","blob","Blob","type","undefined","sendData","subscribe","next","response","error","readAsDataURL","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.ts","D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.html"],"sourcesContent":["// import { Component } from '@angular/core';\r\n// import { ImageScannerApiService } from './image-scanner-api.service';\r\n// import { NgxImageCompressService } from 'ngx-image-compress';//to compress image,library from angular\r\n\r\n// @Component({\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html'\r\n// })\r\n// export class AppComponent {\r\n//   title = 'app';\r\n//   selectedImage: File | null = null;\r\n\r\n//   constructor(\r\n//     private imgScannerApi: ImageScannerApiService,\r\n//     private imageCompress: NgxImageCompressService\r\n//   ) {}\r\n\r\n//   onFileSelected(event: any) {\r\n//     const files = event.target.files;\r\n//     this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n//      // Log the original size of the image in KB\r\n//     if (this.selectedImage) {\r\n//       const originalSizeInBytes = this.selectedImage.size;\r\n//       const originalSizeInKB = originalSizeInBytes / 1024;\r\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n//     }\r\n//     // call here,if you want to compress the image here before uploading\r\n//     this.compressImage();\r\n//   }\r\n\r\n//   //function to compress image\r\n//   compressImage(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onload = () => {\r\n//         const base64String = reader.result as string;\r\n//         this.imageCompress\r\n//           .compressFile(base64String, -1, 60, 60)\r\n//           .then((compressedBase64: string) => {\r\n//             //below 4 lines code only to check size of img after compress\r\n//             const compressedSizeInBytes = compressedBase64.length;\r\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n//             console.log('Compressed Image:', compressedBase64);\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Image Compression Error:', error);\r\n//           });\r\n//       };\r\n//       reader.readAsDataURL(this.selectedImage);\r\n//     }\r\n//   }\r\n\r\n//   onUpload(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onloadend = () => {\r\n//         const imageBytes = reader.result as ArrayBuffer;\r\n//         this.imgScannerApi.sendData(imageBytes).subscribe({\r\n//           next: (response) =>{\r\n//             console.log('API Response:', response);\r\n//           },\r\n//          error : (error) => {\r\n//             console.error('API Error:', error);\r\n//           },\r\n//         });\r\n//       };\r\n//       reader.readAsArrayBuffer(this.selectedImage);\r\n//     }\r\n//   }\r\n// }\r\n\r\n//////////////////////////////////////////////////\r\n//this code is for 1st-select img,then compressed it,then upload or send it to service for http post.\r\n// Import necessary modules and services\r\nimport { Component } from '@angular/core';\r\nimport { ImageScannerApiService } from './image-scanner-api.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n  selectedImage: File | null = null;\r\n\r\n  constructor(private imgScannerApi: ImageScannerApiService) {}\r\n\r\n  onFileSelected(event: any) {\r\n    const files = event.target.files;\r\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n    if (this.selectedImage) {\r\n      // Log the original size of the image in KB\r\n      const originalSizeInBytes = this.selectedImage.size;\r\n      const originalSizeInKB = originalSizeInBytes / 1024;\r\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n\r\n      // Call the function to compress and upload the image\r\n      this.compressAndUpload();\r\n    }\r\n  }\r\n\r\n  compressAndUpload(): void {\r\n    if (this.selectedImage) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const imageData = reader.result as string;\r\n        const byteCharacters = atob(imageData.split(',')[1]);\r\n        const byteNumbers = new Array(byteCharacters.length);\r\n\r\n        for (let i = 0; i < byteCharacters.length; i++) {\r\n          byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n        }\r\n\r\n        const byteArray = new Uint8Array(byteNumbers);\r\n        const blob = new Blob([byteArray], { type: undefined });\r\n\r\n        // Call your API service here to send the compressed image\r\n        this.imgScannerApi.sendData(blob).subscribe({\r\n          next: (response) => {\r\n            console.log('API Response:', response);\r\n          },\r\n          error: (error) => {\r\n            console.error('API Error:', error);\r\n          },\r\n        });\r\n      };\r\n      reader.readAsDataURL(this.selectedImage);\r\n    }\r\n  }\r\n}\r\n","<body>\r\n  <!-- <app-nav-menu></app-nav-menu>\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div> -->\r\n</body>\r\n<h2>Smart Paper Scanner</h2>\r\n<div>\r\n  <input type=\"file\" (change)=\"onFileSelected($event)\" />\r\n</div>\r\n<br>\r\n<hr>\r\n<button (click)=\"compressAndUpload()\">Compress and Upload</button>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}