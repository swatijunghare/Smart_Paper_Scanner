{"ast":null,"code":"// import { Component } from '@angular/core';\n// import { ImageScannerApiService } from './image-scanner-api.service';\n// import { NgxImageCompressService } from 'ngx-image-compress';//to compress image,library from angular\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-root',\n//   templateUrl: './app.component.html'\n// })\n// export class AppComponent {\n//   title = 'app';\n//   selectedImage: File | null = null;\n//   constructor(\n//     private imgScannerApi: ImageScannerApiService,\n//     private imageCompress: NgxImageCompressService\n//   ) {}\n//   onFileSelected(event: any) {\n//     const files = event.target.files;\n//     this.selectedImage = files && files.length > 0 ? files[0] :  null;\n//      // Log the original size of the image in KB\n//     if (this.selectedImage) {\n//       const originalSizeInBytes = this.selectedImage.size;\n//       const originalSizeInKB = originalSizeInBytes / 1024;\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n//     }\n//     // call here,if you want to compress the image here before uploading\n//     this.compressImage();\n//   }\n//   //function to compress image\n//   compressImage(): void {\n//     if (this.selectedImage) {\n//       const reader = new FileReader();\n//       reader.onload = () => {\n//         const base64String = reader.result as string;\n//         this.imageCompress\n//           .compressFile(base64String, -1, 60, 60)\n//           .then((compressedBase64: string) => {\n//             //below 4 lines code only to check size of img after compress\n//             const compressedSizeInBytes = compressedBase64.length;\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n//            // console.log('Compressed Image:', compressedBase64);\n//           })\n//           .catch((error) => {\n//             console.error('Image Compression Error:', error);\n//           });\n//       };\n//       reader.readAsDataURL(this.selectedImage);\n//     }\n//   }\n//   onUpload(): void {\n//     if (this.selectedImage) {\n//       const reader = new FileReader();\n//       reader.onloadend = () => {\n//         const imageBytes = reader.result as ArrayBuffer;\n//         this.imgScannerApi.sendData(imageBytes).subscribe({\n//           next: (response) =>{\n//             console.log('API Response:', response);\n//           },\n//          error : (error) => {\n//             console.error('API Error:', error);\n//           },\n//         });\n//       };\n//       reader.readAsArrayBuffer(this.selectedImage);\n//     }\n//   }\n// }\n//////////////////////////////////////////////////\n//this code is for 1st-select img,then compressed it,then upload or send it to service for http post.\n//here getting api response before click on upload function\n// import { Component } from '@angular/core';\n// import { ImageScannerApiService } from './image-scanner-api.service';\n// import { NgxImageCompressService } from 'ngx-image-compress';\n// @Component({\n//   selector: 'app-root',\n//   templateUrl: './app.component.html'\n// })\n// export class AppComponent {\n//   title = 'app';\n//   selectedImage: File | null = null;\n//   constructor(\n//     private imgScannerApi: ImageScannerApiService,\n//     private imageCompress: NgxImageCompressService\n//   ) {}\n//   onFileSelected(event: any) {\n//     const files = event.target.files;\n//     this.selectedImage = files && files.length > 0 ? files[0] : null;\n//     if (this.selectedImage) {\n//       const originalSizeInBytes = this.selectedImage.size;\n//       const originalSizeInKB = originalSizeInBytes / 1024;\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n//       this.compressAndUpload();\n//     }\n//   }\n//   compressAndUpload(): void {\n//     if (this.selectedImage) {\n//       const reader = new FileReader();\n//       reader.onload = () => {\n//         const base64String = reader.result as string;\n//         this.imageCompress\n//           .compressFile(base64String, -1, 60, 60)\n//           .then((compressedBase64: string) => {\n//             // Now you can use compressedBase64 as a base64 string\n//             const compressedSizeInBytes = compressedBase64.length;\n//            // console.log('Compressed Image Size:', compressedSizeInBytes);\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n//             // Call your API service here to send the compressed image\n//             this.imgScannerApi.sendData(compressedBase64.split(',')[1]).subscribe({\n//               next: (response) => {\n//                 console.log('API Response:', response);\n//               },\n//               error: (error) => {\n//                 console.error('API Error:', error);\n//               },\n//             });\n//           })\n//           .catch((error) => {\n//             console.error('Image Compression Error:', error);\n//           });\n//       };\n//       reader.readAsDataURL(this.selectedImage);\n//     }\n//   }\n// }\n//////////////////////////////////////////////////////////////////\n//seperate compress function and upload function\nimport { Component } from '@angular/core';\nlet AppComponent = class AppComponent {\n  constructor(imgScannerApi, imageCompress) {\n    this.imgScannerApi = imgScannerApi;\n    this.imageCompress = imageCompress;\n    this.title = 'app';\n    this.selectedImage = null;\n    this.compressedBase64 = null;\n  }\n  onFileSelected(event) {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n    if (this.selectedImage) {\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n      this.compressImage();\n    }\n  }\n  compressImage() {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result;\n        this.imageCompress.compressFile(base64String, -1, 60, 60).then(compressedBase64 => {\n          const compressedSizeInBytes = compressedBase64.length;\n          const compressedSizeInKB = compressedSizeInBytes / 1024;\n          console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n          this.compressedBase64 = compressedBase64;\n        }).catch(error => {\n          console.error('Image Compression Error:', error);\n        });\n      };\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n  onUpload() {\n    if (this.compressedBase64) {\n      this.imgScannerApi.sendData(this.compressedBase64.split(',')[1]).subscribe({\n        next: response => {\n          console.log('API Response:', response);\n        },\n        error: error => {\n          console.error('API Error:', error);\n        }\n      });\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappingseAAe;AAQlC,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAKvBC,YACUC,aAAqC,EACrCC,aAAsC;IADtC,kBAAa,GAAbD,aAAa;IACb,kBAAa,GAAbC,aAAa;IANvB,UAAK,GAAG,KAAK;IACb,kBAAa,GAAgB,IAAI;IACjC,qBAAgB,GAAkB,IAAI;EAKnC;EAEHC,cAAc,CAACC,KAAU;IACvB,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;IAChC,IAAI,CAACE,aAAa,GAAGF,KAAK,IAAIA,KAAK,CAACG,MAAM,GAAG,CAAC,GAAGH,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;IAEhE,IAAI,IAAI,CAACE,aAAa,EAAE;MACtB,MAAME,mBAAmB,GAAG,IAAI,CAACF,aAAa,CAACG,IAAI;MACnD,MAAMC,gBAAgB,GAAGF,mBAAmB,GAAG,IAAI;MACnDG,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,gBAAgB,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;MACtE,IAAI,CAACC,aAAa,EAAE;;EAExB;EAEAA,aAAa;IACX,IAAI,IAAI,CAACR,aAAa,EAAE;MACtB,MAAMS,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAK;QACnB,MAAMC,YAAY,GAAGH,MAAM,CAACI,MAAgB;QAC5C,IAAI,CAAClB,aAAa,CACfmB,YAAY,CAACF,YAAY,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CACtCG,IAAI,CAAEC,gBAAwB,IAAI;UACjC,MAAMC,qBAAqB,GAAGD,gBAAgB,CAACf,MAAM;UACrD,MAAMiB,kBAAkB,GAAGD,qBAAqB,GAAG,IAAI;UACvDZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEY,kBAAkB,CAACX,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;UAC1E,IAAI,CAACS,gBAAgB,GAAGA,gBAAgB;QAC1C,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAI;UACff,OAAO,CAACe,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAClD,CAAC,CAAC;MACN,CAAC;MACDX,MAAM,CAACY,aAAa,CAAC,IAAI,CAACrB,aAAa,CAAC;;EAE5C;EAEAsB,QAAQ;IACN,IAAI,IAAI,CAACN,gBAAgB,EAAE;MACzB,IAAI,CAACtB,aAAa,CAAC6B,QAAQ,CAAC,IAAI,CAACP,gBAAgB,CAACQ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS,CAAC;QACzEC,IAAI,EAAGC,QAAQ,IAAI;UACjBtB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEqB,QAAQ,CAAC;QACxC,CAAC;QACDP,KAAK,EAAGA,KAAK,IAAI;UACff,OAAO,CAACe,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;QACpC;OACD,CAAC;;EAEN;CACD;AAvDY5B,YAAY,eAJxBD,SAAS,CAAC;EACTqC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE;CACd,CAAC,GACWrC,YAAY,CAuDxB;SAvDYA,YAAY","names":["Component","AppComponent","constructor","imgScannerApi","imageCompress","onFileSelected","event","files","target","selectedImage","length","originalSizeInBytes","size","originalSizeInKB","console","log","toFixed","compressImage","reader","FileReader","onload","base64String","result","compressFile","then","compressedBase64","compressedSizeInBytes","compressedSizeInKB","catch","error","readAsDataURL","onUpload","sendData","split","subscribe","next","response","selector","templateUrl"],"sourceRoot":"","sources":["D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\r\n// import { ImageScannerApiService } from './image-scanner-api.service';\r\n// import { NgxImageCompressService } from 'ngx-image-compress';//to compress image,library from angular\r\n\r\n// @Component({\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html'\r\n// })\r\n// export class AppComponent {\r\n//   title = 'app';\r\n//   selectedImage: File | null = null;\r\n\r\n//   constructor(\r\n//     private imgScannerApi: ImageScannerApiService,\r\n//     private imageCompress: NgxImageCompressService\r\n//   ) {}\r\n\r\n//   onFileSelected(event: any) {\r\n//     const files = event.target.files;\r\n//     this.selectedImage = files && files.length > 0 ? files[0] :  null;\r\n\r\n//      // Log the original size of the image in KB\r\n//     if (this.selectedImage) {\r\n//       const originalSizeInBytes = this.selectedImage.size;\r\n//       const originalSizeInKB = originalSizeInBytes / 1024;\r\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n//     }\r\n//     // call here,if you want to compress the image here before uploading\r\n//     this.compressImage();\r\n//   }\r\n\r\n//   //function to compress image\r\n//   compressImage(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onload = () => {\r\n//         const base64String = reader.result as string;\r\n//         this.imageCompress\r\n//           .compressFile(base64String, -1, 60, 60)\r\n//           .then((compressedBase64: string) => {\r\n//             //below 4 lines code only to check size of img after compress\r\n//             const compressedSizeInBytes = compressedBase64.length;\r\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n//            // console.log('Compressed Image:', compressedBase64);\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Image Compression Error:', error);\r\n//           });\r\n//       };\r\n//       reader.readAsDataURL(this.selectedImage);\r\n//     }\r\n//   }\r\n\r\n//   onUpload(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onloadend = () => {\r\n//         const imageBytes = reader.result as ArrayBuffer;\r\n        \r\n//         this.imgScannerApi.sendData(imageBytes).subscribe({\r\n//           next: (response) =>{\r\n//             console.log('API Response:', response);\r\n//           },\r\n//          error : (error) => {\r\n//             console.error('API Error:', error);\r\n//           },\r\n//         });\r\n//       };\r\n//       reader.readAsArrayBuffer(this.selectedImage);\r\n//     }\r\n//   }\r\n// }\r\n\r\n//////////////////////////////////////////////////\r\n//this code is for 1st-select img,then compressed it,then upload or send it to service for http post.\r\n//here getting api response before click on upload function\r\n\r\n// import { Component } from '@angular/core';\r\n// import { ImageScannerApiService } from './image-scanner-api.service';\r\n// import { NgxImageCompressService } from 'ngx-image-compress';\r\n\r\n// @Component({\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html'\r\n// })\r\n// export class AppComponent {\r\n//   title = 'app';\r\n//   selectedImage: File | null = null;\r\n\r\n//   constructor(\r\n//     private imgScannerApi: ImageScannerApiService,\r\n//     private imageCompress: NgxImageCompressService\r\n//   ) {}\r\n\r\n//   onFileSelected(event: any) {\r\n//     const files = event.target.files;\r\n//     this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n//     if (this.selectedImage) {\r\n//       const originalSizeInBytes = this.selectedImage.size;\r\n//       const originalSizeInKB = originalSizeInBytes / 1024;\r\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n\r\n//       this.compressAndUpload();\r\n//     }\r\n//   }\r\n\r\n//   compressAndUpload(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onload = () => {\r\n//         const base64String = reader.result as string;\r\n//         this.imageCompress\r\n//           .compressFile(base64String, -1, 60, 60)\r\n//           .then((compressedBase64: string) => {\r\n//             // Now you can use compressedBase64 as a base64 string\r\n//             const compressedSizeInBytes = compressedBase64.length;\r\n//            // console.log('Compressed Image Size:', compressedSizeInBytes);\r\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n  \r\n//             // Call your API service here to send the compressed image\r\n//             this.imgScannerApi.sendData(compressedBase64.split(',')[1]).subscribe({\r\n//               next: (response) => {\r\n//                 console.log('API Response:', response);\r\n//               },\r\n//               error: (error) => {\r\n//                 console.error('API Error:', error);\r\n//               },\r\n//             });\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Image Compression Error:', error);\r\n//           });\r\n//       };\r\n//       reader.readAsDataURL(this.selectedImage);\r\n//     }\r\n//   }\r\n  \r\n// }\r\n\r\n//////////////////////////////////////////////////////////////////\r\n//seperate compress function and upload function\r\nimport { Component } from '@angular/core';\r\nimport { ImageScannerApiService } from './image-scanner-api.service';\r\nimport { NgxImageCompressService } from 'ngx-image-compress';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n  selectedImage: File | null = null;\r\n  compressedBase64: string | null = null;\r\n\r\n  constructor(\r\n    private imgScannerApi: ImageScannerApiService,\r\n    private imageCompress: NgxImageCompressService\r\n  ) {}\r\n\r\n  onFileSelected(event: any) {\r\n    const files = event.target.files;\r\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n    if (this.selectedImage) {\r\n      const originalSizeInBytes = this.selectedImage.size;\r\n      const originalSizeInKB = originalSizeInBytes / 1024;\r\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n      this.compressImage();\r\n    }\r\n  }\r\n\r\n  compressImage(): void {\r\n    if (this.selectedImage) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const base64String = reader.result as string;\r\n        this.imageCompress\r\n          .compressFile(base64String, -1, 60, 60)\r\n          .then((compressedBase64: string) => {\r\n            const compressedSizeInBytes = compressedBase64.length;\r\n            const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n            console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n            this.compressedBase64 = compressedBase64;\r\n          })\r\n          .catch((error) => {\r\n            console.error('Image Compression Error:', error);\r\n          });\r\n      };\r\n      reader.readAsDataURL(this.selectedImage);\r\n    }\r\n  }\r\n\r\n  onUpload(): void {\r\n    if (this.compressedBase64) {\r\n      this.imgScannerApi.sendData(this.compressedBase64.split(',')[1]).subscribe({\r\n        next: (response) => {\r\n          console.log('API Response:', response);\r\n        },\r\n        error: (error) => {\r\n          console.error('API Error:', error);\r\n        },\r\n      });\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}