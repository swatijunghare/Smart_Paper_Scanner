{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./image-scanner-api.service\";\nimport * as i2 from \"ngx-image-compress\";\nexport class AppComponent {\n  constructor(imgScannerApi, imageCompress) {\n    this.imgScannerApi = imgScannerApi;\n    this.imageCompress = imageCompress;\n    this.title = 'app';\n    this.selectedImage = null;\n  }\n  onFileSelected(event) {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n    if (this.selectedImage) {\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n    }\n  }\n  compressAndUpload() {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result;\n        this.imageCompress.compressFile(base64String, -1, 60, 60).then(compressedBase64 => {\n          // Now you can use compressedBase64 as a base64 string\n          const compressedSizeInBytes = compressedBase64.length;\n          const compressedSizeInKB = compressedSizeInBytes / 1024;\n          console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n          // Convert the base64 string to a Uint8Array\n          const binaryString = atob(compressedBase64.split(',')[1]);\n          const byteArray = new Uint8Array(binaryString.length);\n          for (let i = 0; i < binaryString.length; i++) {\n            byteArray[i] = binaryString.charCodeAt(i);\n          }\n          // Call your API service here to send the compressed image\n          this.imgScannerApi.sendData(byteArray).subscribe({\n            next: response => {\n              console.log('API Response:', response);\n            },\n            error: error => {\n              console.error('API Error:', error);\n            }\n          });\n        }).catch(error => {\n          console.error('Image Compression Error:', error);\n        });\n      };\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ImageScannerApiService), i0.ɵɵdirectiveInject(i2.NgxImageCompressService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 9,\n  vars: 0,\n  consts: [[\"type\", \"file\", 3, \"change\"], [3, \"click\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"body\");\n      i0.ɵɵelementStart(1, \"h2\");\n      i0.ɵɵtext(2, \"Smart Paper Scanner\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\")(4, \"input\", 0);\n      i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_4_listener($event) {\n        return ctx.onFileSelected($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(5, \"br\")(6, \"hr\");\n      i0.ɵɵelementStart(7, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_7_listener() {\n        return ctx.compressAndUpload();\n      });\n      i0.ɵɵtext(8, \"Compress and Upload\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["AppComponent","constructor","imgScannerApi","imageCompress","onFileSelected","event","files","target","selectedImage","length","originalSizeInBytes","size","originalSizeInKB","console","log","toFixed","compressAndUpload","reader","FileReader","onload","base64String","result","compressFile","then","compressedBase64","compressedSizeInBytes","compressedSizeInKB","binaryString","atob","split","byteArray","Uint8Array","i","charCodeAt","sendData","subscribe","next","response","error","catch","readAsDataURL","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.ts","D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.html"],"sourcesContent":["// import { Component } from '@angular/core';\r\n// import { ImageScannerApiService } from './image-scanner-api.service';\r\n// import { NgxImageCompressService } from 'ngx-image-compress';//to compress image,library from angular\r\n\r\n// @Component({\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html'\r\n// })\r\n// export class AppComponent {\r\n//   title = 'app';\r\n//   selectedImage: File | null = null;\r\n\r\n//   constructor(\r\n//     private imgScannerApi: ImageScannerApiService,\r\n//     private imageCompress: NgxImageCompressService\r\n//   ) {}\r\n\r\n//   onFileSelected(event: any) {\r\n//     const files = event.target.files;\r\n//     this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n//      // Log the original size of the image in KB\r\n//     if (this.selectedImage) {\r\n//       const originalSizeInBytes = this.selectedImage.size;\r\n//       const originalSizeInKB = originalSizeInBytes / 1024;\r\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n//     }\r\n//     // call here,if you want to compress the image here before uploading\r\n//     this.compressImage();\r\n//   }\r\n\r\n//   //function to compress image\r\n//   compressImage(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onload = () => {\r\n//         const base64String = reader.result as string;\r\n//         this.imageCompress\r\n//           .compressFile(base64String, -1, 60, 60)\r\n//           .then((compressedBase64: string) => {\r\n//             //below 4 lines code only to check size of img after compress\r\n//             const compressedSizeInBytes = compressedBase64.length;\r\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n//             console.log('Compressed Image:', compressedBase64);\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Image Compression Error:', error);\r\n//           });\r\n//       };\r\n//       reader.readAsDataURL(this.selectedImage);\r\n//     }\r\n//   }\r\n\r\n//   onUpload(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onloadend = () => {\r\n//         const imageBytes = reader.result as ArrayBuffer;\r\n//         this.imgScannerApi.sendData(imageBytes).subscribe({\r\n//           next: (response) =>{\r\n//             console.log('API Response:', response);\r\n//           },\r\n//          error : (error) => {\r\n//             console.error('API Error:', error);\r\n//           },\r\n//         });\r\n//       };\r\n//       reader.readAsArrayBuffer(this.selectedImage);\r\n//     }\r\n//   }\r\n// }\r\n\r\n//////////////////////////////////////////////////\r\n//this code is for 1st-select img,then compressed it,then upload or send it to service for http post.\r\n\r\n  import { Component } from '@angular/core';\r\n  import { ImageScannerApiService } from './image-scanner-api.service';\r\n  import { NgxImageCompressService } from 'ngx-image-compress';\r\n  \r\n  @Component({\r\n    selector: 'app-root',\r\n    templateUrl: './app.component.html'\r\n  })\r\n  export class AppComponent {\r\n    title = 'app';\r\n    selectedImage: File | null = null;\r\n  \r\n    constructor(\r\n      private imgScannerApi: ImageScannerApiService,\r\n      private imageCompress: NgxImageCompressService\r\n    ) {}\r\n  \r\n    onFileSelected(event: any) {\r\n      const files = event.target.files;\r\n      this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n  \r\n      if (this.selectedImage) {\r\n        const originalSizeInBytes = this.selectedImage.size;\r\n        const originalSizeInKB = originalSizeInBytes / 1024;\r\n        console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n      }\r\n    }\r\n  \r\n    compressAndUpload(): void {\r\n      if (this.selectedImage) {\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n          const base64String = reader.result as string;\r\n          this.imageCompress\r\n            .compressFile(base64String, -1, 60, 60)\r\n            .then((compressedBase64: string) => {\r\n              // Now you can use compressedBase64 as a base64 string\r\n              const compressedSizeInBytes = compressedBase64.length;\r\n              const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n              console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n    \r\n              // Convert the base64 string to a Uint8Array\r\n              const binaryString = atob(compressedBase64.split(',')[1]);\r\n              const byteArray = new Uint8Array(binaryString.length);\r\n              for (let i = 0; i < binaryString.length; i++) {\r\n                byteArray[i] = binaryString.charCodeAt(i);\r\n              }\r\n    \r\n              // Call your API service here to send the compressed image\r\n              this.imgScannerApi.sendData(byteArray).subscribe({\r\n                next: (response) => {\r\n                  console.log('API Response:', response);\r\n                },\r\n                error: (error) => {\r\n                  console.error('API Error:', error);\r\n                },\r\n              });\r\n            })\r\n            .catch((error) => {\r\n              console.error('Image Compression Error:', error);\r\n            });\r\n        };\r\n        reader.readAsDataURL(this.selectedImage);\r\n      }\r\n    }\r\n    \r\n    \r\n  }\r\n  \r\n  \r\n\r\n","<body>\r\n  <!-- <app-nav-menu></app-nav-menu>\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div> -->\r\n</body>\r\n<h2>Smart Paper Scanner</h2>\r\n<div>\r\n  <input type=\"file\" (change)=\"onFileSelected($event)\" />\r\n</div>\r\n<br>\r\n<hr>\r\n<button (click)=\"compressAndUpload()\">Compress and Upload</button>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}