{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ImageScannerApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://ai.smartpaperapi.com/scan/form/image';\n    this.apiKey = '10b3213a34ef-46b5-829e-56768d30a6fb';\n  }\n  sendData(compressedBase64) {\n    // Convert the base64 string back to a Blob\n    const byteCharacters = atob(compressedBase64);\n    const byteNumbers = new Array(byteCharacters.length);\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n    const byteArray = new Uint8Array(byteNumbers);\n    const blob = new Blob([byteArray], {\n      type: 'image/jpeg'\n    });\n    const formData = new FormData();\n    const formName = 'api_form_v1';\n    formData.append('formName', formName);\n    formData.append('formImage', blob, 'compressed_image.jpg');\n    formData.append('metadata', '{}');\n    formData.append('realTimeRespType', 'simpleKeyValue');\n    return this.http.post(this.apiUrl, formData, {\n      headers: {\n        'x-api-key': this.apiKey\n      }\n    });\n  }\n}\nImageScannerApiService.ɵfac = function ImageScannerApiService_Factory(t) {\n  return new (t || ImageScannerApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nImageScannerApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageScannerApiService,\n  factory: ImageScannerApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAmFA,OAAM,MAAOA,sBAAsB;EAIjCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAG,8CAA8C;IACvD,WAAM,GAAG,qCAAqC;EAEf;EAEvCC,QAAQ,CAACC,gBAAwB;IAC/B;IACA,MAAMC,cAAc,GAAGC,IAAI,CAACF,gBAAgB,CAAC;IAC7C,MAAMG,WAAW,GAAG,IAAIC,KAAK,CAACH,cAAc,CAACI,MAAM,CAAC;IACpD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,cAAc,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;MAC9CH,WAAW,CAACG,CAAC,CAAC,GAAGL,cAAc,CAACM,UAAU,CAACD,CAAC,CAAC;;IAE/C,MAAME,SAAS,GAAG,IAAIC,UAAU,CAACN,WAAW,CAAC;IAC7C,MAAMO,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,SAAS,CAAC,EAAE;MAAEI,IAAI,EAAE;IAAY,CAAE,CAAC;IAE1D,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,MAAMC,QAAQ,GAAG,aAAa;IAE9BF,QAAQ,CAACG,MAAM,CAAC,UAAU,EAAED,QAAQ,CAAC;IACrCF,QAAQ,CAACG,MAAM,CAAC,WAAW,EAAEN,IAAI,EAAE,sBAAsB,CAAC;IAC1DG,QAAQ,CAACG,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC;IACjCH,QAAQ,CAACG,MAAM,CAAC,kBAAkB,EAAE,gBAAgB,CAAC;IAErD,OAAO,IAAI,CAAClB,IAAI,CAACmB,IAAI,CAAC,IAAI,CAACC,MAAM,EAAEL,QAAQ,EAAE;MAC3CM,OAAO,EAAE;QACP,WAAW,EAAE,IAAI,CAACC;;KAErB,CAAC;EACJ;;AA7BWxB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAyB,SAAtBzB,sBAAsB;EAAA0B,YAFrB;AAAM","names":["ImageScannerApiService","constructor","http","sendData","compressedBase64","byteCharacters","atob","byteNumbers","Array","length","i","charCodeAt","byteArray","Uint8Array","blob","Blob","type","formData","FormData","formName","append","post","apiUrl","headers","apiKey","factory","providedIn"],"sourceRoot":"","sources":["D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.ts"],"sourcesContent":["// import { Component } from '@angular/core';\r\n// import { ImageScannerApiService } from './image-scanner-api.service';\r\n// import { NgxImageCompressService } from 'ngx-image-compress';//to compress image,library from angular\r\n\r\n// @Component({\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html'\r\n// })\r\n// export class AppComponent {\r\n//   title = 'app';\r\n//   selectedImage: File | null = null;\r\n\r\n//   constructor(\r\n//     private imgScannerApi: ImageScannerApiService,\r\n//     private imageCompress: NgxImageCompressService\r\n//   ) {}\r\n\r\n//   onFileSelected(event: any) {\r\n//     const files = event.target.files;\r\n//     this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n//      // Log the original size of the image in KB\r\n//     if (this.selectedImage) {\r\n//       const originalSizeInBytes = this.selectedImage.size;\r\n//       const originalSizeInKB = originalSizeInBytes / 1024;\r\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n//     }\r\n//     // call here,if you want to compress the image here before uploading\r\n//     this.compressImage();\r\n//   }\r\n\r\n//   //function to compress image\r\n//   compressImage(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onload = () => {\r\n//         const base64String = reader.result as string;\r\n//         this.imageCompress\r\n//           .compressFile(base64String, -1, 60, 60)\r\n//           .then((compressedBase64: string) => {\r\n//             //below 4 lines code only to check size of img after compress\r\n//             const compressedSizeInBytes = compressedBase64.length;\r\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n//             console.log('Compressed Image:', compressedBase64);\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Image Compression Error:', error);\r\n//           });\r\n//       };\r\n//       reader.readAsDataURL(this.selectedImage);\r\n//     }\r\n//   }\r\n\r\n//   onUpload(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onloadend = () => {\r\n//         const imageBytes = reader.result as ArrayBuffer;\r\n//         this.imgScannerApi.sendData(imageBytes).subscribe({\r\n//           next: (response) =>{\r\n//             console.log('API Response:', response);\r\n//           },\r\n//          error : (error) => {\r\n//             console.error('API Error:', error);\r\n//           },\r\n//         });\r\n//       };\r\n//       reader.readAsArrayBuffer(this.selectedImage);\r\n//     }\r\n//   }\r\n// }\r\n\r\n//////////////////////////////////////////////////\r\n//this code is for 1st-select img,then compressed it,then upload or send it to service for http post.\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImageScannerApiService {\r\n  private apiUrl = 'https://ai.smartpaperapi.com/scan/form/image';\r\n  private apiKey = '10b3213a34ef-46b5-829e-56768d30a6fb';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  sendData(compressedBase64: string): Observable<any> {\r\n    // Convert the base64 string back to a Blob\r\n    const byteCharacters = atob(compressedBase64);\r\n    const byteNumbers = new Array(byteCharacters.length);\r\n    for (let i = 0; i < byteCharacters.length; i++) {\r\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n    }\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    const blob = new Blob([byteArray], { type: 'image/jpeg' });\r\n\r\n    const formData = new FormData();\r\n    const formName = 'api_form_v1';\r\n\r\n    formData.append('formName', formName);\r\n    formData.append('formImage', blob, 'compressed_image.jpg');\r\n    formData.append('metadata', '{}');\r\n    formData.append('realTimeRespType', 'simpleKeyValue');\r\n\r\n    return this.http.post(this.apiUrl, formData, {\r\n      headers: {\r\n        'x-api-key': this.apiKey,\r\n      },\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}