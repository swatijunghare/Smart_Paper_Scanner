{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ImageScannerApiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://ai.smartpaperapi.com/scan/form/image';\n    this.apiKey = '10b3213a34ef-46b5-829e-56768d30a6fb';\n  }\n  sendData(formData) {\n    return this.http.post(this.apiUrl, formData, {\n      headers: {\n        'x-api-key': this.apiKey\n      }\n    });\n  }\n  base64ToBlob(base64) {\n    const byteString = atob(base64.split(',')[1]);\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ab], {\n      type: 'image/jpeg'\n    });\n  }\n}\nImageScannerApiService.ɵfac = function ImageScannerApiService_Factory(t) {\n  return new (t || ImageScannerApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nImageScannerApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageScannerApiService,\n  factory: ImageScannerApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAuFA,OAAM,MAAOA,sBAAsB;EAKjCC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAHhB,WAAM,GAAG,8CAA8C;IACvD,WAAM,GAAG,qCAAqC;EAEhB;EAEtCC,QAAQ,CAACC,QAAkB;IACzB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,IAAI,CAACC,MAAM,EAAEF,QAAQ,EAAE;MAC3CG,OAAO,EAAE;QACP,WAAW,EAAE,IAAI,CAACC;;KAErB,CAAC;EACJ;EAEQC,YAAY,CAACC,MAAc;IACjC,MAAMC,UAAU,GAAGC,IAAI,CAACF,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7C,MAAMC,EAAE,GAAG,IAAIC,WAAW,CAACJ,UAAU,CAACK,MAAM,CAAC;IAC7C,MAAMC,EAAE,GAAG,IAAIC,UAAU,CAACJ,EAAE,CAAC;IAE7B,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,UAAU,CAACK,MAAM,EAAEG,CAAC,EAAE,EAAE;MAC1CF,EAAE,CAACE,CAAC,CAAC,GAAGR,UAAU,CAACS,UAAU,CAACD,CAAC,CAAC;;IAGlC,OAAO,IAAIE,IAAI,CAAC,CAACP,EAAE,CAAC,EAAE;MAAEQ,IAAI,EAAE;IAAY,CAAE,CAAC;EAC/C;;AAzBWtB,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAuB,SAAtBvB,sBAAsB;EAAAwB,YAFrB;AAAM","names":["ImageScannerApiService","constructor","http","sendData","formData","post","apiUrl","headers","apiKey","base64ToBlob","base64","byteString","atob","split","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","Blob","type","factory","providedIn"],"sourceRoot":"","sources":["D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\image-scanner-api.service.ts"],"sourcesContent":["// import { HttpClient } from '@angular/common/http';\n// import { Injectable } from '@angular/core';\n// import { Observable} from 'rxjs';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class ImageScannerApiService {\n\n//   private apiUrl = 'https://ai.smartpaperapi.com/scan/form/image';\n//   private apiKey = '10b3213a34ef-46b5-829e-56768d30a6fb'; \n\n//   constructor(private http : HttpClient) { }\n  \n//   sendData(imageBytes: ArrayBuffer): Observable<any> {\n//     const formData = new FormData();\n//     const formName = 'api_form_v1';\n\n//     const formImage = new Blob([imageBytes], { type: 'image/jpeg' });\n//     formData.append('formName', formName);\n//     formData.append('formImage', formImage);\n//     formData.append('metadata', '{}'); // string[optional], returned back as is when used\n//     formData.append('realTimeRespType', 'simpleKeyValue');\n\n//     return this.http.post(this.apiUrl, formData, {\n//       headers: {\n//         'x-api-key': this.apiKey, \n//       },\n//     });\n//   } \n// }\n\n/////////////////////////////////////////////\n//this code is taking compressed image and sending it to server..to http post for gettting json format\n\n// Import necessary modules and services\n// image-scanner-api.service.ts\n\n// import { Injectable } from '@angular/core';\n// import { HttpClient } from '@angular/common/http';\n// import { Observable } from 'rxjs';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class ImageScannerApiService {\n//   private apiUrl = 'https://ai.smartpaperapi.com/scan/form/image';\n//   private apiKey = '10b3213a34ef-46b5-829e-56768d30a6fb';\n\n//   constructor(private http: HttpClient) {}\n\n//   sendData(compressedBase64: string): Observable<any> {\n//     // Convert the base64 string back to a Uint8Array\n//     const byteCharacters = atob(compressedBase64);\n//     const byteNumbers = new Array(byteCharacters.length);\n//     for (let i = 0; i < byteCharacters.length; i++) {\n//       byteNumbers[i] = byteCharacters.charCodeAt(i);\n//     }\n//     const byteArray = new Uint8Array(byteNumbers);\n  \n//     const formData = new FormData();\n//     const formName = 'api_form_v1';\n  \n//     formData.append('formName', formName);\n//     formData.append('formImage', new Blob([byteArray], { type: 'image/jpeg' }), 'compressed_image.jpg');\n//     formData.append('metadata', '{}');\n//     formData.append('realTimeRespType', 'simpleKeyValue');\n  \n//     console.log('Before sendData:', compressedBase64);\n//     return this.http.post(this.apiUrl, formData, {\n//       headers: {\n//         'x-api-key': this.apiKey,\n//       },\n//     });\n//   }\n  \n  \n// }\n//////////////////////////////////////////////////////////\n// image-scanner-api.service.ts\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ImageScannerApiService {\n \n  private apiUrl = 'https://ai.smartpaperapi.com/scan/form/image';\n  private apiKey = '10b3213a34ef-46b5-829e-56768d30a6fb';\n\n  constructor(private http:HttpClient) {}\n\n  sendData(formData: FormData): Observable<any> {\n    return this.http.post(this.apiUrl, formData, {\n      headers: {\n        'x-api-key': this.apiKey,\n      },\n    });\n  }\n\n  private base64ToBlob(base64: string): Blob {\n    const byteString = atob(base64.split(',')[1]);\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n\n    return new Blob([ab], { type: 'image/jpeg' });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}