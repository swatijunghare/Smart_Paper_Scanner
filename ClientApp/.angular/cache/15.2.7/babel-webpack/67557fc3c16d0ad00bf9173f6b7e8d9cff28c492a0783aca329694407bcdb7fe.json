{"ast":null,"code":"import _asyncToGenerator from \"D:/project angular/smartPaperScanner/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./image-scanner-api.service\";\nimport * as i2 from \"ngx-image-compress\";\nexport class AppComponent {\n  constructor(imgScannerApi, imageCompress) {\n    this.imgScannerApi = imgScannerApi;\n    this.imageCompress = imageCompress;\n    this.title = 'app';\n    this.selectedImage = null;\n    this.compressedBase64 = null;\n  }\n  onFileSelected(event) {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n    if (this.selectedImage) {\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n    }\n  }\n  compressAndUpload() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        if (_this.selectedImage) {\n          const reader = new FileReader();\n          reader.onload = () => {\n            const base64String = reader.result;\n            _this.imageCompress.compressFile(base64String, -1, 60, 60).then(compressedBase64 => {\n              const compressedSizeInBytes = compressedBase64.length;\n              const compressedSizeInKB = compressedSizeInBytes / 1024;\n              console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n              _this.compressedBase64 = compressedBase64; // Assign the compressedBase64\n              resolve(); // Resolve the Promise when compression is done\n            }).catch(error => {\n              console.error('Image Compression Error:', error);\n              reject(error); // Reject the Promise if there is an error\n            });\n          };\n\n          reader.readAsDataURL(_this.selectedImage);\n        } else {\n          reject(new Error('No image selected'));\n        }\n      });\n    })();\n  }\n  // Function to handle the button click\n  onClickUpload() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      console.log('Button clicked!');\n      try {\n        yield _this2.compressAndUpload(); // Wait for compression to complete\n        // Now, you can use this.compressedBase64 to send the data to the API\n        if (_this2.compressedBase64) {\n          _this2.imgScannerApi.sendData(_this2.compressedBase64).subscribe({\n            next: response => {\n              console.log('API Response:', response);\n            },\n            error: error => {\n              console.error('API Error:', error);\n            }\n          });\n        }\n      } catch (error) {\n        console.error('Error during compression or upload:', error);\n      }\n    })();\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ImageScannerApiService), i0.ɵɵdirectiveInject(i2.NgxImageCompressService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 9,\n  vars: 0,\n  consts: [[\"type\", \"file\", 3, \"change\"], [3, \"click\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"body\");\n      i0.ɵɵelementStart(1, \"h2\");\n      i0.ɵɵtext(2, \"Smart Paper Scanner\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\")(4, \"input\", 0);\n      i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_4_listener($event) {\n        return ctx.onFileSelected($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(5, \"br\")(6, \"hr\");\n      i0.ɵɵelementStart(7, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_7_listener() {\n        return ctx.onClickUpload();\n      });\n      i0.ɵɵtext(8, \"Upload\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["AppComponent","constructor","imgScannerApi","imageCompress","onFileSelected","event","files","target","selectedImage","length","originalSizeInBytes","size","originalSizeInKB","console","log","toFixed","compressAndUpload","Promise","resolve","reject","reader","FileReader","onload","base64String","result","compressFile","then","compressedBase64","compressedSizeInBytes","compressedSizeInKB","catch","error","readAsDataURL","Error","onClickUpload","sendData","subscribe","next","response","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.ts","D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.html"],"sourcesContent":["// import { Component } from '@angular/core';\r\n// import { ImageScannerApiService } from './image-scanner-api.service';\r\n// import { NgxImageCompressService } from 'ngx-image-compress';//to compress image,library from angular\r\n\r\n// @Component({\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html'\r\n// })\r\n// export class AppComponent {\r\n//   title = 'app';\r\n//   selectedImage: File | null = null;\r\n\r\n//   constructor(\r\n//     private imgScannerApi: ImageScannerApiService,\r\n//     private imageCompress: NgxImageCompressService\r\n//   ) {}\r\n\r\n//   onFileSelected(event: any) {\r\n//     const files = event.target.files;\r\n//     this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n//      // Log the original size of the image in KB\r\n//     if (this.selectedImage) {\r\n//       const originalSizeInBytes = this.selectedImage.size;\r\n//       const originalSizeInKB = originalSizeInBytes / 1024;\r\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n//     }\r\n//     // call here,if you want to compress the image here before uploading\r\n//     this.compressImage();\r\n//   }\r\n\r\n//   //function to compress image\r\n//   compressImage(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onload = () => {\r\n//         const base64String = reader.result as string;\r\n//         this.imageCompress\r\n//           .compressFile(base64String, -1, 60, 60)\r\n//           .then((compressedBase64: string) => {\r\n//             //below 4 lines code only to check size of img after compress\r\n//             const compressedSizeInBytes = compressedBase64.length;\r\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n//             console.log('Compressed Image:', compressedBase64);\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Image Compression Error:', error);\r\n//           });\r\n//       };\r\n//       reader.readAsDataURL(this.selectedImage);\r\n//     }\r\n//   }\r\n\r\n//   onUpload(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onloadend = () => {\r\n//         const imageBytes = reader.result as ArrayBuffer;\r\n//         this.imgScannerApi.sendData(imageBytes).subscribe({\r\n//           next: (response) =>{\r\n//             console.log('API Response:', response);\r\n//           },\r\n//          error : (error) => {\r\n//             console.error('API Error:', error);\r\n//           },\r\n//         });\r\n//       };\r\n//       reader.readAsArrayBuffer(this.selectedImage);\r\n//     }\r\n//   }\r\n// }\r\n\r\n//////////////////////////////////////////////////\r\n//this code is for 1st-select img,then compressed it,then upload or send it to service for http post.\r\n// Import necessary modules and services\r\n// Import necessary modules and services\r\n// import { Component } from '@angular/core';\r\n// import { ImageScannerApiService } from './image-scanner-api.service';\r\n// import { NgxImageCompressService } from 'ngx-image-compress';\r\n\r\n// @Component({\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html'\r\n// })\r\n// export class AppComponent {\r\n//   title = 'app';\r\n//   selectedImage: File | null = null;\r\n\r\n//   constructor(\r\n//     private imgScannerApi: ImageScannerApiService,\r\n//     private imageCompress: NgxImageCompressService\r\n//   ) {}\r\n\r\n//   onFileSelected(event: any) {\r\n//     const files = event.target.files;\r\n//     this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n//     if (this.selectedImage) {\r\n//       const originalSizeInBytes = this.selectedImage.size;\r\n//       const originalSizeInKB = originalSizeInBytes / 1024;\r\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n\r\n//       this.compressAndUpload();\r\n//     }\r\n//   }\r\n\r\n//   compressAndUpload(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onload = () => {\r\n//         const base64String = reader.result as string;\r\n//         this.imageCompress\r\n//           .compressFile(base64String, -1, 60, 60)\r\n//           .then((compressedBase64: string) => {\r\n//             // Now you can use compressedBase64 as a base64 string\r\n//             const compressedSizeInBytes = compressedBase64.length;\r\n//            // console.log('Compressed Image Size:', compressedSizeInBytes);\r\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n  \r\n//             // Call your API service here to send the compressed image\r\n//             this.imgScannerApi.sendData(compressedBase64.split(',')[1]).subscribe({\r\n//               next: (response) => {\r\n//                 console.log('API Response:', response);\r\n//               },\r\n//               error: (error) => {\r\n//                 console.error('API Error:', error);\r\n//               },\r\n//             });\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Image Compression Error:', error);\r\n//           });\r\n//       };\r\n//       reader.readAsDataURL(this.selectedImage);\r\n//     }\r\n//   }\r\n  \r\n// }\r\n\r\n///////////////////////////////\r\n// ... (your imports and component decorator)\r\n\r\n\r\nimport { Component } from '@angular/core';\r\nimport { ImageScannerApiService } from './image-scanner-api.service';\r\nimport { NgxImageCompressService } from 'ngx-image-compress';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n  selectedImage: File | null = null;\r\n  compressedBase64: string | null = null;\r\n\r\n  constructor(\r\n    private imgScannerApi: ImageScannerApiService,\r\n    private imageCompress: NgxImageCompressService\r\n  ) {}\r\n\r\n  onFileSelected(event: any) {\r\n    const files = event.target.files;\r\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n    if (this.selectedImage) {\r\n      const originalSizeInBytes = this.selectedImage.size;\r\n      const originalSizeInKB = originalSizeInBytes / 1024;\r\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n    }\r\n  }\r\n\r\n  async compressAndUpload(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      if (this.selectedImage) {\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n          const base64String = reader.result as string;\r\n          this.imageCompress\r\n            .compressFile(base64String, -1, 60, 60)\r\n            .then((compressedBase64: string) => {\r\n              const compressedSizeInBytes = compressedBase64.length;\r\n              const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n              console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n              this.compressedBase64 = compressedBase64; // Assign the compressedBase64\r\n\r\n              resolve(); // Resolve the Promise when compression is done\r\n            })\r\n            .catch((error) => {\r\n              console.error('Image Compression Error:', error);\r\n              reject(error); // Reject the Promise if there is an error\r\n            });\r\n        };\r\n        reader.readAsDataURL(this.selectedImage);\r\n      } else {\r\n        reject(new Error('No image selected'));\r\n      }\r\n    });\r\n  }\r\n\r\n  // Function to handle the button click\r\n  async onClickUpload(): Promise<void> {\r\n    console.log('Button clicked!');\r\n    try {\r\n      await this.compressAndUpload(); // Wait for compression to complete\r\n      // Now, you can use this.compressedBase64 to send the data to the API\r\n      if (this.compressedBase64) {\r\n        this.imgScannerApi.sendData(this.compressedBase64).subscribe({\r\n          next: (response) => {\r\n            console.log('API Response:', response);\r\n          },\r\n          error: (error) => {\r\n            console.error('API Error:', error);\r\n          },\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during compression or upload:', error);\r\n    }\r\n  }\r\n}\r\n","<body>\r\n  <!-- <app-nav-menu></app-nav-menu>\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div> -->\r\n</body>\r\n<h2>Smart Paper Scanner</h2>\r\n<div>\r\n  <input type=\"file\" (change)=\"onFileSelected($event)\" />\r\n</div>\r\n<br>\r\n<hr>\r\n<button (click)=\"onClickUpload()\">Upload</button>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}