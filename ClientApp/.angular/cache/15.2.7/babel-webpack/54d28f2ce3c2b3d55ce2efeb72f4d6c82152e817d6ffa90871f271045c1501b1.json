{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./image-scanner-api.service\";\nimport * as i2 from \"ngx-image-compress\";\nimport * as i3 from \"@angular/common\";\nfunction AppComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"h3\");\n    i0.ɵɵtext(2, \"API Response:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"pre\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"json\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(5, 1, ctx_r0.apiResponse));\n  }\n}\nexport class AppComponent {\n  constructor(imgScannerApi, imageCompress) {\n    this.imgScannerApi = imgScannerApi;\n    this.imageCompress = imageCompress;\n    this.title = 'app';\n    this.selectedImage = null;\n  }\n  onFileSelected(event) {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n    // Log the original size of the image in KB\n    if (this.selectedImage) {\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n    }\n    // call here,if you want to compress the image here before uploading\n    this.compressImage();\n  }\n  //function to compress image\n  compressImage() {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result;\n        this.imageCompress.compressFile(base64String, -1, 60, 60).then(compressedBase64 => {\n          //below 4 lines code only to check size of img after compress\n          const compressedSizeInBytes = compressedBase64.length;\n          const compressedSizeInKB = compressedSizeInBytes / 1024;\n          console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n          console.log('Compressed Image:', compressedBase64);\n        }).catch(error => {\n          console.error('Image Compression Error:', error);\n        });\n      };\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n  onUpload() {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const imageBytes = reader.result;\n        this.imgScannerApi.sendData(imageBytes).subscribe({\n          next: response => {\n            console.log('API Response:', response);\n          },\n          error: error => {\n            console.error('API Error:', error);\n          }\n        });\n      };\n      reader.readAsArrayBuffer(this.selectedImage);\n    }\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ImageScannerApiService), i0.ɵɵdirectiveInject(i2.NgxImageCompressService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 9,\n  vars: 1,\n  consts: [[\"type\", \"file\", 3, \"change\"], [3, \"click\"], [4, \"ngIf\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"body\");\n      i0.ɵɵelementStart(1, \"div\")(2, \"input\", 0);\n      i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_2_listener($event) {\n        return ctx.onFileSelected($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(3, \"br\")(4, \"hr\");\n      i0.ɵɵelementStart(5, \"div\")(6, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_6_listener() {\n        return ctx.onUpload();\n      });\n      i0.ɵɵtext(7, \" Upload\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(8, AppComponent_div_8_Template, 6, 3, \"div\", 2);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngIf\", ctx.apiResponse);\n    }\n  },\n  dependencies: [i3.NgIf, i3.JsonPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","AppComponent","constructor","imgScannerApi","imageCompress","onFileSelected","event","files","target","selectedImage","length","originalSizeInBytes","size","originalSizeInKB","console","log","toFixed","compressImage","reader","FileReader","onload","base64String","result","compressFile","then","compressedBase64","compressedSizeInBytes","compressedSizeInKB","catch","error","readAsDataURL","onUpload","onloadend","imageBytes","sendData","subscribe","next","response","readAsArrayBuffer","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.html","D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.ts"],"sourcesContent":["<body>\r\n  <!-- <app-nav-menu></app-nav-menu>\r\n  <div class=\"container\">\r\n    <router-outlet></router-outlet>\r\n  </div> -->\r\n</body>\r\n<!-- app.component.html -->\r\n\r\n<div>\r\n  <input type=\"file\" (change)=\"onFileSelected($event)\" />\r\n</div>\r\n<br><hr>\r\n<div>\r\n  <button (click)=\"onUpload()\"> Upload</button>\r\n</div>\r\n\r\n<div *ngIf=\"apiResponse\">\r\n  <h3>API Response:</h3>\r\n  <pre>{{ apiResponse | json }}</pre>\r\n</div>\r\n","import { Component } from '@angular/core';\r\nimport { ImageScannerApiService } from './image-scanner-api.service';\r\nimport { NgxImageCompressService } from 'ngx-image-compress';//to compress image,library from angular\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n  selectedImage: File | null = null;\r\n\r\n  constructor(\r\n    private imgScannerApi: ImageScannerApiService,\r\n    private imageCompress: NgxImageCompressService\r\n  ) {}\r\n\r\n  onFileSelected(event: any) {\r\n    const files = event.target.files;\r\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n     // Log the original size of the image in KB\r\n    if (this.selectedImage) {\r\n      const originalSizeInBytes = this.selectedImage.size;\r\n      const originalSizeInKB = originalSizeInBytes / 1024;\r\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n    }\r\n    // call here,if you want to compress the image here before uploading\r\n    this.compressImage();\r\n  }\r\n\r\n  //function to compress image\r\n  compressImage(): void {\r\n    if (this.selectedImage) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const base64String = reader.result as string;\r\n        this.imageCompress\r\n          .compressFile(base64String, -1, 60, 60)\r\n          .then((compressedBase64: string) => {\r\n            //below 4 lines code only to check size of img after compress\r\n            const compressedSizeInBytes = compressedBase64.length;\r\n            const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n            console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n            console.log('Compressed Image:', compressedBase64);\r\n          })\r\n          .catch((error) => {\r\n            console.error('Image Compression Error:', error);\r\n          });\r\n      };\r\n      reader.readAsDataURL(this.selectedImage);\r\n    }\r\n  }\r\n\r\n  onUpload(): void {\r\n    if (this.selectedImage) {\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        const imageBytes = reader.result as ArrayBuffer;\r\n        this.imgScannerApi.sendData(imageBytes).subscribe({\r\n          next: (response) =>{\r\n            console.log('API Response:', response);\r\n          },\r\n         error : (error) => {\r\n            console.error('API Error:', error);\r\n          },\r\n        });\r\n      };\r\n      reader.readAsArrayBuffer(this.selectedImage);\r\n    }\r\n  }\r\n}\r\n\r\n//////////////////////////////////////////////////\r\n//this code is for 1st-select img,then compressed it,then upload or send it to service for http post.\r\n\r\n// import { Component } from '@angular/core';\r\n// import { ImageScannerApiService } from './image-scanner-api.service';\r\n// import { NgxImageCompressService } from 'ngx-image-compress';\r\n\r\n// @Component({\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html'\r\n// })\r\n// export class AppComponent {\r\n//   title = 'app';\r\n//   selectedImage: File | null = null;\r\n\r\n//   constructor(\r\n//     private imgScannerApi: ImageScannerApiService,\r\n//     private imageCompress: NgxImageCompressService\r\n//   ) {}\r\n\r\n//   onFileSelected(event: any) {\r\n//     const files = event.target.files;\r\n//     this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n//     if (this.selectedImage) {\r\n//       const originalSizeInBytes = this.selectedImage.size;\r\n//       const originalSizeInKB = originalSizeInBytes / 1024;\r\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n\r\n//       this.compressAndUpload();\r\n//     }\r\n//   }\r\n\r\n//   compressAndUpload(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onload = () => {\r\n//         const base64String = reader.result as string;\r\n//         this.imageCompress\r\n//           .compressFile(base64String, -1, 60, 60)\r\n//           .then((compressedBase64: string) => {\r\n//             // Now you can use compressedBase64 as a base64 string\r\n//             const compressedSizeInBytes = compressedBase64.length;\r\n//            // console.log('Compressed Image Size:', compressedSizeInBytes);\r\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n  \r\n//             // Call your API service here to send the compressed image\r\n//             this.imgScannerApi.sendData(compressedBase64.split(',')[1]).subscribe({\r\n//               next: (response) => {\r\n//                 console.log('API Response:', response);\r\n//               },\r\n//               error: (error) => {\r\n//                 console.error('API Error:', error);\r\n//               },\r\n//             });\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Image Compression Error:', error);\r\n//           });\r\n//       };\r\n//       reader.readAsDataURL(this.selectedImage);\r\n//     }\r\n//   }\r\n  \r\n// }\r\n\r\n//////////////////////////////////////////////////////////////////\r\n//seperate compress function and upload function\r\n\r\n// app.component.ts\r\n// import { Component } from '@angular/core';\r\n// import { ImageScannerApiService } from './image-scanner-api.service';\r\n// import { NgxImageCompressService } from 'ngx-image-compress';\r\n\r\n// @Component({\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html'\r\n// })\r\n// export class AppComponent {\r\n//   title = 'app';\r\n//   selectedImage: File | null = null;\r\n//   compressedBase64: string | null = null;\r\n//   apiResponse: any | null = null;\r\n\r\n//   constructor(\r\n//     private imgScannerApi: ImageScannerApiService,\r\n//     private imageCompress: NgxImageCompressService\r\n//   ) {}\r\n\r\n//   onFileSelected(event: any) {\r\n//     const files = event.target.files;\r\n//     this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n//     if (this.selectedImage) {\r\n//       const originalSizeInBytes = this.selectedImage.size;\r\n//       const originalSizeInKB = originalSizeInBytes / 1024;\r\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n//     }\r\n//   }\r\n\r\n//   async compress(): Promise<void> {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onload = () => {\r\n//         const base64String = reader.result as string;\r\n//         this.imageCompress\r\n//           .compressFile(base64String, -1, 60, 60)\r\n//           .then((compressedBase64: string) => {\r\n//             const compressedSizeInBytes = compressedBase64.length;\r\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n  \r\n//             // Log the compressedBase64 string before sending it\r\n//             console.log('Compressed Base64:', compressedBase64);\r\n  \r\n//             // Assign the compressedBase64 to a class variable\r\n//             this.compressedBase64 = compressedBase64;\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Image Compression Error:', error);\r\n//           });\r\n//       };\r\n//       reader.readAsDataURL(this.selectedImage);\r\n//     }\r\n//   }\r\n\r\n//   onClickUpload(): void {\r\n//     console.log('Button clicked!');\r\n//     this.compress();\r\n  \r\n//     // Now, you can use this.compressedBase64 to send the data to the API\r\n//     if (this.compressedBase64) {\r\n//       console.log('Before sendData:', this.compressedBase64); // Add this log\r\n  \r\n//       this.imgScannerApi.sendData(this.compressedBase64).subscribe({\r\n//         next: (response) => {\r\n//           console.log('API Response:', response);\r\n//           this.apiResponse = response; // Assign the API response to the class variable\r\n//         },\r\n//         error: (error) => {\r\n//           console.error('API Error:', error);\r\n//         },\r\n//       });\r\n//     }\r\n//   }\r\n  \r\n//   getImageUrl(): string {\r\n//     // Assuming you have a method to create a data URL from the compressed base64 string\r\n//     return 'data:image/jpeg;base64,' + this.compressedBase64;\r\n//   }\r\n// }\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}