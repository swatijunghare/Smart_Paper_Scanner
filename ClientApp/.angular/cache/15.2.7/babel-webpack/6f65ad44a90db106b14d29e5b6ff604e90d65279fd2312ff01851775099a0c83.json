{"ast":null,"code":"// import { HttpClient } from '@angular/common/http';\n// import { Injectable } from '@angular/core';\n// import { Observable} from 'rxjs';\nimport { __decorate } from \"tslib\";\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class ImageScannerApiService {\n//   private apiUrl = 'https://ai.smartpaperapi.com/scan/form/image';\n//   private apiKey = '10b3213a34ef-46b5-829e-56768d30a6fb'; \n//   constructor(private http : HttpClient) { }\n//   sendData(imageBytes: ArrayBuffer): Observable<any> {\n//     const formData = new FormData();\n//     const formName = 'api_form_v1';\n//     const formImage = new Blob([imageBytes], { type: 'image/jpeg' });\n//     formData.append('formName', formName);\n//     formData.append('formImage', formImage);\n//     formData.append('metadata', '{}'); // string[optional], returned back as is when used\n//     formData.append('realTimeRespType', 'simpleKeyValue');\n//     return this.http.post(this.apiUrl, formData, {\n//       headers: {\n//         'x-api-key': this.apiKey, \n//       },\n//     });\n//   } \n// }\n/////////////////////////////////////////////\n//this code is taking compressed image and sending it to server..to http post for gettting json format\n// Import necessary modules and services\n// image-scanner-api.service.ts\nimport { Component } from '@angular/core';\nlet AppComponent = class AppComponent {\n  constructor(imgScannerApi, imageCompress) {\n    this.imgScannerApi = imgScannerApi;\n    this.imageCompress = imageCompress;\n    this.title = 'app';\n    this.selectedImage = null;\n  }\n  onFileSelected(event) {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n    if (this.selectedImage) {\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n      this.compressAndUpload();\n    }\n  }\n  compressAndUpload() {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result;\n        this.imageCompress.compressFile(base64String, -1, 60, 60).then(compressedBase64 => {\n          // Now you can use compressedBase64 as a base64 string\n          const compressedSizeInBytes = compressedBase64.length;\n          // console.log('Compressed Image Size:', compressedSizeInBytes);\n          const compressedSizeInKB = compressedSizeInBytes / 1024;\n          console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n          // Call your API service here to send the compressed image\n          this.imgScannerApi.sendData(compressedBase64.split(',')[1]).subscribe({\n            next: response => {\n              console.log('API Response:', response);\n            },\n            error: error => {\n              console.error('API Error:', error);\n            }\n          });\n        }).catch(error => {\n          console.error('Image Compression Error:', error);\n        });\n      };\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA,SAASA,SAAS,QAAQ,eAAe;AAQlC,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAIvBC,YACUC,aAAqC,EACrCC,aAAsC;IADtC,kBAAa,GAAbD,aAAa;IACb,kBAAa,GAAbC,aAAa;IALvB,UAAK,GAAG,KAAK;IACb,kBAAa,GAAgB,IAAI;EAK9B;EAEHC,cAAc,CAACC,KAAU;IACvB,MAAMC,KAAK,GAAGD,KAAK,CAACE,MAAM,CAACD,KAAK;IAChC,IAAI,CAACE,aAAa,GAAGF,KAAK,IAAIA,KAAK,CAACG,MAAM,GAAG,CAAC,GAAGH,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI;IAEhE,IAAI,IAAI,CAACE,aAAa,EAAE;MACtB,MAAME,mBAAmB,GAAG,IAAI,CAACF,aAAa,CAACG,IAAI;MACnD,MAAMC,gBAAgB,GAAGF,mBAAmB,GAAG,IAAI;MACnDG,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEF,gBAAgB,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;MAEtE,IAAI,CAACC,iBAAiB,EAAE;;EAE5B;EAEAA,iBAAiB;IACf,IAAI,IAAI,CAACR,aAAa,EAAE;MACtB,MAAMS,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC/BD,MAAM,CAACE,MAAM,GAAG,MAAK;QACnB,MAAMC,YAAY,GAAGH,MAAM,CAACI,MAAgB;QAC5C,IAAI,CAAClB,aAAa,CACfmB,YAAY,CAACF,YAAY,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CACtCG,IAAI,CAAEC,gBAAwB,IAAI;UACjC;UACA,MAAMC,qBAAqB,GAAGD,gBAAgB,CAACf,MAAM;UACtD;UACC,MAAMiB,kBAAkB,GAAGD,qBAAqB,GAAG,IAAI;UACvDZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEY,kBAAkB,CAACX,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC;UAE1E;UACA,IAAI,CAACb,aAAa,CAACyB,QAAQ,CAACH,gBAAgB,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,SAAS,CAAC;YACpEC,IAAI,EAAGC,QAAQ,IAAI;cACjBlB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEiB,QAAQ,CAAC;YACxC,CAAC;YACDC,KAAK,EAAGA,KAAK,IAAI;cACfnB,OAAO,CAACmB,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;YACpC;WACD,CAAC;QACJ,CAAC,CAAC,CACDC,KAAK,CAAED,KAAK,IAAI;UACfnB,OAAO,CAACmB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAClD,CAAC,CAAC;MACN,CAAC;MACDf,MAAM,CAACiB,aAAa,CAAC,IAAI,CAAC1B,aAAa,CAAC;;EAE5C;CAED;AAtDYR,YAAY,eAJxBD,SAAS,CAAC;EACToC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE;CACd,CAAC,GACWpC,YAAY,CAsDxB;SAtDYA,YAAY","names":["Component","AppComponent","constructor","imgScannerApi","imageCompress","onFileSelected","event","files","target","selectedImage","length","originalSizeInBytes","size","originalSizeInKB","console","log","toFixed","compressAndUpload","reader","FileReader","onload","base64String","result","compressFile","then","compressedBase64","compressedSizeInBytes","compressedSizeInKB","sendData","split","subscribe","next","response","error","catch","readAsDataURL","selector","templateUrl"],"sourceRoot":"","sources":["D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\image-scanner-api.service.ts"],"sourcesContent":["// import { HttpClient } from '@angular/common/http';\n// import { Injectable } from '@angular/core';\n// import { Observable} from 'rxjs';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n// export class ImageScannerApiService {\n\n//   private apiUrl = 'https://ai.smartpaperapi.com/scan/form/image';\n//   private apiKey = '10b3213a34ef-46b5-829e-56768d30a6fb'; \n\n//   constructor(private http : HttpClient) { }\n  \n//   sendData(imageBytes: ArrayBuffer): Observable<any> {\n//     const formData = new FormData();\n//     const formName = 'api_form_v1';\n\n//     const formImage = new Blob([imageBytes], { type: 'image/jpeg' });\n//     formData.append('formName', formName);\n//     formData.append('formImage', formImage);\n//     formData.append('metadata', '{}'); // string[optional], returned back as is when used\n//     formData.append('realTimeRespType', 'simpleKeyValue');\n\n//     return this.http.post(this.apiUrl, formData, {\n//       headers: {\n//         'x-api-key': this.apiKey, \n//       },\n//     });\n//   } \n// }\n\n/////////////////////////////////////////////\n//this code is taking compressed image and sending it to server..to http post for gettting json format\n\n// Import necessary modules and services\n// image-scanner-api.service.ts\n\nimport { Component } from '@angular/core';\nimport { ImageScannerApiService } from './image-scanner-api.service';\nimport { NgxImageCompressService } from 'ngx-image-compress';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  title = 'app';\n  selectedImage: File | null = null;\n\n  constructor(\n    private imgScannerApi: ImageScannerApiService,\n    private imageCompress: NgxImageCompressService\n  ) {}\n\n  onFileSelected(event: any) {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n\n    if (this.selectedImage) {\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n\n      this.compressAndUpload();\n    }\n  }\n\n  compressAndUpload(): void {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result as string;\n        this.imageCompress\n          .compressFile(base64String, -1, 60, 60)\n          .then((compressedBase64: string) => {\n            // Now you can use compressedBase64 as a base64 string\n            const compressedSizeInBytes = compressedBase64.length;\n           // console.log('Compressed Image Size:', compressedSizeInBytes);\n            const compressedSizeInKB = compressedSizeInBytes / 1024;\n            console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n  \n            // Call your API service here to send the compressed image\n            this.imgScannerApi.sendData(compressedBase64.split(',')[1]).subscribe({\n              next: (response) => {\n                console.log('API Response:', response);\n              },\n              error: (error) => {\n                console.error('API Error:', error);\n              },\n            });\n          })\n          .catch((error) => {\n            console.error('Image Compression Error:', error);\n          });\n      };\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n  \n} "]},"metadata":{},"sourceType":"module","externalDependencies":[]}