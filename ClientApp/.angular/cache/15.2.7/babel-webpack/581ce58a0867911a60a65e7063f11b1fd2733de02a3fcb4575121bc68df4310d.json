{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./image-scanner-api.service\";\nimport * as i2 from \"ngx-image-compress\";\nexport class AppComponent {\n  constructor(imgScannerApi, imageCompress) {\n    this.imgScannerApi = imgScannerApi;\n    this.imageCompress = imageCompress;\n    this.title = 'app';\n    this.selectedImage = null;\n  }\n  onFileSelected(event) {\n    const files = event.target.files;\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\n    if (this.selectedImage) {\n      const originalSizeInBytes = this.selectedImage.size;\n      const originalSizeInKB = originalSizeInBytes / 1024;\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\n      this.compressAndUpload();\n    }\n  }\n  // compressAndUpload(): void {\n  //   if (this.selectedImage) {\n  //     const reader = new FileReader();\n  //     reader.onload = () => {\n  //       const base64String = reader.result as string;\n  //       this.imageCompress\n  //         .compressFile(base64String, -1, 60, 60)\n  //         .then((compressedBase64: string) => {\n  //           // Now you can use compressedBase64 as a base64 string\n  //           const compressedSizeInBytes = compressedBase64.length;\n  //          // console.log('Compressed Image Size:', compressedSizeInBytes);\n  //           const compressedSizeInKB = compressedSizeInBytes / 1024;\n  //           console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n  //           // Call your API service here to send the compressed image\n  //           this.imgScannerApi.sendData(compressedBase64.split(',')[1]).subscribe({\n  //             next: (response) => {\n  //               console.log('API Response:', response);\n  //             },\n  //             error: (error) => {\n  //               console.error('API Error:', error);\n  //             },\n  //           });\n  //         })\n  //         .catch((error) => {\n  //           console.error('Image Compression Error:', error);\n  //         });\n  //     };\n  //     reader.readAsDataURL(this.selectedImage);\n  //   }\n  // }\n  compressImage() {\n    if (this.selectedImage) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const base64String = reader.result;\n        this.imageCompress.compressFile(base64String, -1, 60, 60).then(compressedBase64 => {\n          const compressedSizeInBytes = compressedBase64.length;\n          const compressedSizeInKB = compressedSizeInBytes / 1024;\n          console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\n          this.compressedBase64 = compressedBase64;\n        }).catch(error => {\n          console.error('Image Compression Error:', error);\n        });\n      };\n      reader.readAsDataURL(this.selectedImage);\n    }\n  }\n  onUpload() {\n    if (this.compressedBase64) {\n      this.imgScannerApi.sendData(this.compressedBase64.split(',')[1]).subscribe({\n        next: response => {\n          console.log('API Response:', response);\n        },\n        error: error => {\n          console.error('API Error:', error);\n        }\n      });\n    }\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ImageScannerApiService), i0.ɵɵdirectiveInject(i2.NgxImageCompressService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 9,\n  vars: 0,\n  consts: [[\"type\", \"file\", 3, \"change\"], [3, \"click\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Smart Paper Scanner \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\")(3, \"input\", 0);\n      i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_3_listener($event) {\n        return ctx.onFileSelected($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(4, \"br\")(5, \"hr\");\n      i0.ɵɵelementStart(6, \"div\")(7, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_7_listener() {\n        return ctx.compressAndUpload();\n      });\n      i0.ɵɵtext(8, \" Upload\");\n      i0.ɵɵelementEnd()();\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["AppComponent","constructor","imgScannerApi","imageCompress","onFileSelected","event","files","target","selectedImage","length","originalSizeInBytes","size","originalSizeInKB","console","log","toFixed","compressAndUpload","compressImage","reader","FileReader","onload","base64String","result","compressFile","then","compressedBase64","compressedSizeInBytes","compressedSizeInKB","catch","error","readAsDataURL","onUpload","sendData","split","subscribe","next","response","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.ts","D:\\project angular\\smartPaperScanner\\ClientApp\\src\\app\\app.component.html"],"sourcesContent":["// import { Component } from '@angular/core';\r\n// import { ImageScannerApiService } from './image-scanner-api.service';\r\n// import { NgxImageCompressService } from 'ngx-image-compress';//to compress image,library from angular\r\n\r\n// @Component({\r\n//   selector: 'app-root',\r\n//   templateUrl: './app.component.html'\r\n// })\r\n// export class AppComponent {\r\n//   title = 'app';\r\n//   selectedImage: File | null = null;\r\n\r\n//   constructor(\r\n//     private imgScannerApi: ImageScannerApiService,\r\n//     private imageCompress: NgxImageCompressService\r\n//   ) {}\r\n\r\n//   onFileSelected(event: any) {\r\n//     const files = event.target.files;\r\n//     this.selectedImage = files && files.length > 0 ? files[0] :  null;\r\n\r\n//      // Log the original size of the image in KB\r\n//     if (this.selectedImage) {\r\n//       const originalSizeInBytes = this.selectedImage.size;\r\n//       const originalSizeInKB = originalSizeInBytes / 1024;\r\n//       console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n//     }\r\n//     // call here,if you want to compress the image here before uploading\r\n//     this.compressImage();\r\n//   }\r\n\r\n//   //function to compress image\r\n//   compressImage(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onload = () => {\r\n//         const base64String = reader.result as string;\r\n//         this.imageCompress\r\n//           .compressFile(base64String, -1, 60, 60)\r\n//           .then((compressedBase64: string) => {\r\n//             //below 4 lines code only to check size of img after compress\r\n//             const compressedSizeInBytes = compressedBase64.length;\r\n//             const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n//             console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n//            // console.log('Compressed Image:', compressedBase64);\r\n//           })\r\n//           .catch((error) => {\r\n//             console.error('Image Compression Error:', error);\r\n//           });\r\n//       };\r\n//       reader.readAsDataURL(this.selectedImage);\r\n//     }\r\n//   }\r\n\r\n//   onUpload(): void {\r\n//     if (this.selectedImage) {\r\n//       const reader = new FileReader();\r\n//       reader.onloadend = () => {\r\n//         const imageBytes = reader.result as ArrayBuffer;\r\n        \r\n//         this.imgScannerApi.sendData(imageBytes).subscribe({\r\n//           next: (response) =>{\r\n//             console.log('API Response:', response);\r\n//           },\r\n//          error : (error) => {\r\n//             console.error('API Error:', error);\r\n//           },\r\n//         });\r\n//       };\r\n//       reader.readAsArrayBuffer(this.selectedImage);\r\n//     }\r\n//   }\r\n// }\r\n\r\n//////////////////////////////////////////////////\r\n//this code is for 1st-select img,then compressed it,then upload or send it to service for http post.\r\n//here getting api response before click on upload function\r\n\r\nimport { Component } from '@angular/core';\r\nimport { ImageScannerApiService } from './image-scanner-api.service';\r\nimport { NgxImageCompressService } from 'ngx-image-compress';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  title = 'app';\r\n  selectedImage: File | null = null;\r\n\r\n  constructor(\r\n    private imgScannerApi: ImageScannerApiService,\r\n    private imageCompress: NgxImageCompressService\r\n  ) {}\r\n\r\n  onFileSelected(event: any) {\r\n    const files = event.target.files;\r\n    this.selectedImage = files && files.length > 0 ? files[0] : null;\r\n\r\n    if (this.selectedImage) {\r\n      const originalSizeInBytes = this.selectedImage.size;\r\n      const originalSizeInKB = originalSizeInBytes / 1024;\r\n      console.log('Original Image Size:', originalSizeInKB.toFixed(2), 'KB');\r\n\r\n      this.compressAndUpload();\r\n    }\r\n  }\r\n\r\n  // compressAndUpload(): void {\r\n  //   if (this.selectedImage) {\r\n  //     const reader = new FileReader();\r\n  //     reader.onload = () => {\r\n  //       const base64String = reader.result as string;\r\n  //       this.imageCompress\r\n  //         .compressFile(base64String, -1, 60, 60)\r\n  //         .then((compressedBase64: string) => {\r\n  //           // Now you can use compressedBase64 as a base64 string\r\n  //           const compressedSizeInBytes = compressedBase64.length;\r\n  //          // console.log('Compressed Image Size:', compressedSizeInBytes);\r\n  //           const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n  //           console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n  \r\n  //           // Call your API service here to send the compressed image\r\n  //           this.imgScannerApi.sendData(compressedBase64.split(',')[1]).subscribe({\r\n  //             next: (response) => {\r\n  //               console.log('API Response:', response);\r\n  //             },\r\n  //             error: (error) => {\r\n  //               console.error('API Error:', error);\r\n  //             },\r\n  //           });\r\n  //         })\r\n  //         .catch((error) => {\r\n  //           console.error('Image Compression Error:', error);\r\n  //         });\r\n  //     };\r\n  //     reader.readAsDataURL(this.selectedImage);\r\n  //   }\r\n  // }\r\n  compressImage(): void {\r\n    if (this.selectedImage) {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        const base64String = reader.result as string;\r\n        this.imageCompress\r\n          .compressFile(base64String, -1, 60, 60)\r\n          .then((compressedBase64: string) => {\r\n            const compressedSizeInBytes = compressedBase64.length;\r\n            const compressedSizeInKB = compressedSizeInBytes / 1024;\r\n            console.log('Compressed Image Size:', compressedSizeInKB.toFixed(2), 'KB');\r\n            this.compressedBase64 = compressedBase64;\r\n          })\r\n          .catch((error) => {\r\n            console.error('Image Compression Error:', error);\r\n          });\r\n      };\r\n      reader.readAsDataURL(this.selectedImage);\r\n    }\r\n  }\r\n\r\n  onUpload(): void {\r\n    if (this.compressedBase64) {\r\n      this.imgScannerApi.sendData(this.compressedBase64.split(',')[1]).subscribe({\r\n        next: (response) => {\r\n          console.log('API Response:', response);\r\n        },\r\n        error: (error) => {\r\n          console.error('API Error:', error);\r\n        },\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////\r\n//seperate compress function and upload function\r\n","\r\n\r\n<!-- <h2>Smart Paper Scanner </h2>\r\n<div>\r\n  <input type=\"file\" (change)=\"onFileSelected($event)\" />\r\n</div>\r\n<br><hr>\r\n<div>\r\n  <button (click)=\"onUpload()\"> Upload</button>\r\n</div> -->\r\n\r\n<h2>Smart Paper Scanner </h2>\r\n<div>\r\n  <input type=\"file\" (change)=\"onFileSelected($event)\" />\r\n</div>\r\n<br><hr>\r\n<div>\r\n  <button (click)=\" compressAndUpload()\"> Upload</button>\r\n</div>\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}